from torch.utils.data import DataLoader, Dataset
from torchvision import transforms, models
import numpy as np

from torchvision.datasets import ImageFolder


class BrainTumorDataset(ImageFolder):
    def __init__(self, train=True, transform=None, **kwargs):
        if train:
            root = "/home/user/datasets/brain_tumor/train/"
        else:
            root = "/home/user/datasets/brain_tumor/test/"

        super().__init__(root=root, transform=transform)

        self.transforms_aug = []
        # Transformation for converting original image array to an image and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose([transforms.Grayscale(), transforms.Resize(32),])
        )

        # Transformation for converting original image array to an image, rotate it randomly between -45 degrees and 45 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(45),
                ]
            )
        )

        # Transformation for converting original image array to an image, rotate it randomly between -90 degrees and 90 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(90),
                ]
            )
        )

        # Transformation for converting original image array to an image, rotate it randomly between -120 degrees and 120 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(120),
                ]
            )
        )

        # Transformation for converting original image array to an image, rotate it randomly between -180 degrees and 180 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(180),
                ]
            )
        )

        # Transformation for converting original image array to an image, rotate it randomly between -270 degrees and 270 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(270),
                ]
            )
        )

        # Transformation for converting original image array to an image, rotate it randomly between -300 degrees and 300 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(300),
                ]
            )
        )

        # Transformation for converting original image array to an image, rotate it randomly between -330 degrees and 330 degrees, and then convert it to a tensor
        self.transforms_aug.append(
            transforms.Compose(
                [
                    transforms.Grayscale(),
                    transforms.Resize(32),
                    transforms.RandomRotation(330),
                ]
            )
        )

    def __len__(self):
        # return length of image samples
        return len(self.samples)

    def __getitem__(self, idx):
        path, target = self.samples[idx]
        sample = self.loader(path)

        # perform transformations on one instance of X
        index_transform = np.random.randint(8, size=1)[0]
        sample = self.transforms_aug[index_transform](sample)
        if self.transform is not None:
            sample = self.transform(sample)

        return sample, target

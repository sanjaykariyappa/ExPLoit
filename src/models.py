"""conv3 module"""

from typing import List
import torch
import torch.nn as nn
import torch.nn.functional as F
import math
from functools import partial

from DeepFM import DeepFM


def conv3x3(in_planes, out_planes, stride=1):
    "3x3 convolution with padding"
    return nn.Conv2d(
        in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False
    )


class Flatten(nn.Module):
    """Flatten the input"""

    def forward(self, x):
        return x.view(x.size(0), -1)


class Conv4(nn.Module):
    def __init__(
        self,
        x_dim: int = 28,
        n_channels: int = 3,
        n_classes: int = 10,
        mult: int = 2,
        adversary: bool = False,
        alt: bool = False,
    ):
        self.downsample = False
        self.adversary = adversary

        super(Conv4, self).__init__()
        self.n_classes = n_classes
        self.act = nn.ReLU()

        self.f = nn.Sequential(
            nn.Conv2d(n_channels, 16 * mult, 3),  # 26
            self.act,
            nn.MaxPool2d(2, 2),  # 13
            nn.Conv2d(16 * mult, 32 * mult, 3),  # 11
            self.act,
            nn.Conv2d(32 * mult, 64 * mult, 3),  # 9
            self.act,
            nn.Conv2d(64 * mult, 64 * mult, 3),  # 7
            self.act,
            nn.MaxPool2d(2, 2),  # 3 x 3
        )
        n_ch = 64
        linear_dim = 3
        linear_neurons = (linear_dim ** 2) * n_ch
        self.g = nn.Sequential(
            Flatten(),
            nn.Linear(linear_neurons * mult, 64 * mult),
            self.act,
            nn.Linear(64 * mult, self.n_classes),
        )
        if alt:
            self.f = nn.Sequential(
                nn.Conv2d(n_channels, 16 * mult, 3),  # 26
                self.act,
                nn.MaxPool2d(2, 2),  # 13
                nn.Conv2d(16 * mult, 32 * mult, 3),  # 11
                self.act,
                nn.Conv2d(32 * mult, 64 * mult, 3),  # 9
                self.act,
                nn.MaxPool2d(2, 2),  # 4 x 4
            )
            n_ch = 64
            linear_dim = 2
            linear_neurons = (linear_dim ** 2) * n_ch
            self.g = nn.Sequential(
                nn.Conv2d(64 * mult, 64 * mult, 3),  # 2
                self.act,
                Flatten(),
                nn.Linear(linear_neurons * mult, 64 * mult),
                self.act,
                nn.Linear(64 * mult, self.n_classes),
            )
        if self.adversary:
            n_ch = 64
            linear_dim = 3
            if alt:
                linear_dim = 4
            linear_neurons = (linear_dim ** 2) * n_ch
            self.g = nn.Sequential(
                Flatten(),
                nn.Linear(linear_neurons * mult, 128 * mult),
                self.act,
                nn.Linear(128 * mult, 64 * mult),
                self.act,
                nn.Linear(64 * mult, self.n_classes),
            )

    def forward(self, x):
        y_hat = self.f(x)
        y = self.g(y_hat)
        return y


class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm2d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out


class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(Bottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(
            planes, planes, kernel_size=3, stride=stride, padding=1, bias=False
        )
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(planes * 4)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out


class ResNet(nn.Module):
    def __init__(
        self,
        block,
        layers,
        x_dim: int = 32,
        n_channels: int = 3,
        n_classes: int = 10,
        adversary: bool = False,
        alt=False,
    ):
        super(ResNet, self).__init__()
        self.inplanes = 16
        if not alt:
            self.f = nn.Sequential(
                nn.Conv2d(
                    n_channels, 16, kernel_size=3, stride=1, padding=1, bias=False
                ),
                nn.BatchNorm2d(16),
                nn.ReLU(inplace=True),  # 32
                self._make_layer(block, 16, layers[0], stride=2),  # 16
                self._make_layer(block, 32, layers[1], stride=2),  # 8
                self._make_layer(block, 64, layers[2], stride=1),  # 8
                nn.AvgPool2d(int(x_dim / 4), stride=1),
            )
            self.g = nn.Sequential(
                Flatten(),
                nn.Linear(64 * block.expansion, 64),
                nn.ReLU(),
                nn.Linear(64, n_classes),
            )
        else:
            self.f = nn.Sequential(
                nn.Conv2d(
                    n_channels, 16, kernel_size=3, stride=1, padding=1, bias=False
                ),
                nn.BatchNorm2d(16),
                nn.ReLU(inplace=True),
                self._make_layer(block, 16, layers[0], stride=2),  # 16
                self._make_layer(block, 32, layers[1], stride=2),  # 8
            )
            self.g = nn.Sequential(
                self._make_layer(block, 64, layers[2], stride=1),  # 8
                nn.AvgPool2d(int(x_dim / 4), stride=1),
                Flatten(),
                nn.Linear(64 * block.expansion, 64),
                nn.ReLU(),
                nn.Linear(64, n_classes),
            )
        if adversary:
            if not alt:
                self.g = nn.Sequential(
                    Flatten(),
                    nn.Linear(64 * block.expansion, 128),
                    nn.ReLU(),
                    nn.Linear(128, 64),
                    nn.ReLU(),
                    nn.Linear(64, n_classes),
                )
            else:
                self.g = nn.Sequential(
                    Flatten(),
                    nn.Linear(8 * 8 * 32 * block.expansion, 128),
                    nn.ReLU(),
                    nn.Linear(128, 64),
                    nn.ReLU(),
                    nn.Linear(64, n_classes),
                )

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2.0 / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def _make_layer(self, block, planes, blocks, stride=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                nn.Conv2d(
                    self.inplanes,
                    planes * block.expansion,
                    kernel_size=1,
                    stride=stride,
                    bias=False,
                ),
                nn.BatchNorm2d(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes))

        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.f(x)
        x = self.g(x)

        return x


split_models = {
    "conv4_a": partial(Conv4, alt=False),
    "conv4_b": partial(Conv4, alt=True),
    "resnet20_a": partial(ResNet, block=BasicBlock, layers=[3, 3, 3], alt=False),
    "resnet20_b": partial(ResNet, block=BasicBlock, layers=[3, 3, 3], alt=True),
    "deepfm_a": partial(DeepFM, alt=False),
    "deepfm_b": partial(DeepFM, alt=True),
}

import torch
from ml_utils import get_device
from tqdm import tqdm


def get_intermediate_gradients(model, dataloader, criterion):
    """Returns the (input, intermediate_gradients) for split models"""
    device = get_device()
    model = model.to(device)
    model.train()
    grads = []
    ys = []
    p_hats = []
    for x, y in tqdm(dataloader):
        batch_size = x.shape[0]
        ys.append(y)
        x = x.to(device)
        y = y.to(device)
        p_hat = model.f(x)
        p_hat.retain_grad()
        p = model.g(p_hat)
        loss = criterion(p, y)
        loss.backward()
        grads.append(p_hat.grad.detach().cpu() * batch_size)
        p_hats.append(p_hat.detach().cpu())
    grads = torch.cat(grads)
    p_hats = torch.cat(p_hats)
    ys = torch.cat(ys)
    return p_hats, grads, ys
